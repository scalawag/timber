{"tagline":"Logging... Scala-style.","note":"Don't delete this file! It's used internally to help with page regeneration.","body":"Timber is a logging system for use in Scala applications.  It is written in Scala and takes advantage of its unique language features.  It's not a wrapper for an existing Java logging library.\r\n\r\n## Why use Timber?\r\n\r\n- Configuration is done through an internal DSL, allowing you to use the full power of Scala to configure your logging system.\r\n\r\n ```scala\r\n LoggerManager.configure { IN =>\r\n   val console = stderr\r\n   IN :: level >= DEBUG :: console\r\n   IN :: logger.startsWith(\"com.example\") :: level >= WARN:: console\r\n }\r\n ```\r\n\r\n- It supports exposing key configuration parameters through JMX so that the logging system configuration can be modified easily and clearly at run-time.\r\n\r\n ![jconsole](jconsole.png)\r\n\r\n- It takes advantage of Scala's by-name parameters and function literals to provide lazy message evaluation.  That prevents doing work that doesn't need to be done without requiring \"isEnabled\" conditionals.\r\n\r\n  ```scala\r\n  log.debug(\"n = \" + n)\r\n\r\n  log.debug { pw:PrintWriter =>\r\n    pw.print(\"Here's a multi-line log entry that\")\r\n    pw.println(\"won't be built unless it's needed.\")\r\n    traversable.foreach(pw.println)\r\n  }\r\n  ```\r\n\r\n- It supports the [slf4j](http://www.slf4j.org/) interface so that it can be used by Java classes and by applications that are already using the slf4j API (or any API for which slf4j includes a [bridge](http://www.slf4j.org/legacy.html)).\r\n\r\n- It supports [logback](http://logback.qos.ch/) appenders so you can keep using any custom appenders that you've already written.\r\n\r\n- It takes advantage of [Scala Actors](http://www.scala-lang.org/node/242) internally to minimize its impact on your application code's performance.\r\n","name":"Timber","google":""}